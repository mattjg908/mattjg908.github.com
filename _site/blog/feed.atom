<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>A Jekyll Terrifying Blog</title>
	<link href="/blog/feed.atom" rel="self" />
	<link href="/" />
	<id>/</id>
	<author>
		<name>Tom Jackman</name>
	</author>
	<updated>2015-12-29T15:00:16-05:00</updated>

	<entry>
		<title type="text">Octal Numbers and Credit Card Processing</title>
		<link href="/blog/2015/octal-numbers/" />
		<id>/blog/2015/octal-numbers/</id>
		<published>2015-01-01T00:00:00-05:00</published>
		<updated>2015-01-01T00:00:00-05:00</updated>
		<summary type="html">Hello again all.  I like to monitor the orders and exceptions of the Spree sites I work on to ensure everything is working as intended.  One morning I noticed an unusual error: &quot;invalid value for Integer(): \&quot;09\&quot;&quot; in Spree::Checkout/update on a Spree 2.1.x site.


The Issue


Given that this is a Spree-powered e-commerce site, a customer&#39;s inability to checkout is quite alarming. In the backtrace I could see that a string of &quot;09&quot; was causing an invalid value for an integer.  Why hadn&#39;t I seen this on every order in that case?



I went into the browser and completed some test orders.  The bug seemed to affect only credit cards with a leading &quot;0&quot; in the expiration month, and then only certain expiration months.  I returned to the backtrace and saw this error was occurring with Active Merchant.  So, Spree was passing Active Merchant a string while Active Merchant was expecting an integer.



Armed with a clearer understanding of the problem, I did some Googling.  I came across this post.  This post describes the source of this issue as being the behavior of sprintf which I will describe below.  This topic was discussed in the Ruby Forum.


 Octal Numbers 


As per Daniel Martin on the aforementioned post:
  
       sprintf(&quot;%d&quot;,&#39;08&#39;)      ==&gt;   ArgumentError
       sprintf(&quot;%d&quot;,&#39;8&#39;)       ==&gt;   &quot;8&quot;
       sprintf(&quot;%d&quot;,&#39;08&#39;.to_i) ==&gt;   &quot;8&quot;
       sprintf(&quot;%f&quot;,&#39;08&#39;)      ==&gt;   &quot;8.000000&quot;
  



As you can see, sprintf cannot convert &#39;08&#39; or &#39;09&#39; to a decimal. Matthias Reitlinger notes, &quot;%d tells sprintf to expect an Integer as the corresponding argument.  Being given a String instead it tries to convert it by calling Kernel#Integer&quot;




In the same post, we can review some documentation of Kernel#Integer






We can see here that if the argument being provided is a string (and it is since that is what Spree is sending), the &quot;0&quot; will be honored.  Again, we know 
  
    
      sprintf(&quot;%d&quot;,&#39;01&#39;) =&gt; &quot;1&quot;
       | 
      sprintf(&quot;%d&quot;, 01) =&gt; &quot;1&quot;
    

    
      sprintf(&quot;%d&quot;,&#39;02&#39;) =&gt; &quot;2&quot;
       | 
      sprintf(&quot;%d&quot;, 02) =&gt; &quot;2&quot;
    

    
      sprintf(&quot;%d&quot;,&#39;03&#39;) =&gt; &quot;3&quot;
       | 
      sprintf(&quot;%d&quot;, 03) =&gt; &quot;3&quot;
    

    
      sprintf(&quot;%d&quot;,&#39;04&#39;) =&gt; &quot;4&quot;
       | 
      sprintf(&quot;%d&quot;, 04) =&gt; &quot;4&quot;
    

    
      sprintf(&quot;%d&quot;,&#39;05&#39;) =&gt; &quot;5&quot;
       | 
      sprintf(&quot;%d&quot;, 05) =&gt; &quot;5&quot;
    

    
      sprintf(&quot;%d&quot;,&#39;06&#39;) =&gt; &quot;6&quot;
       | 
      sprintf(&quot;%d&quot;, 06) =&gt; &quot;6&quot;
    

    
      sprintf(&quot;%d&quot;,&#39;07&#39;) =&gt; &quot;7&quot;
       | 
      sprintf(&quot;%d&quot;, 07) =&gt; &quot;7&quot;
    

    
      sprintf(&quot;%d&quot;,&#39;08&#39;) =&gt; error
       | 
      sprintf(&quot;%d&quot;, 08) =&gt; error
    

    
      sprintf(&quot;%d&quot;,&#39;09&#39;) =&gt; error
       | 
      sprintf(&quot;%d&quot;, 09) =&gt; error
    

  



 By pre-prepending the &quot;0&quot; to the numbers, they are being marked as &#39;octal&#39;.  Wikipedia defines octal numbers as

&quot;The octal numeral system, or oct for short, is the base-8 number system, and uses the digits 0 to 7. Octal numerals can be made from binary numerals by grouping consecutive binary digits into groups of three (starting from the right).&quot;




So, 08 and 09 are not octal numbers.



Solution


This is why this checkout error did not occur on every order whose payment expiration month had a leading &quot;0&quot;, only August (08) and September (09) were susceptible as the leading &#39;0&#39; indicates we are passing in an octal of which 08 and 09 are not valid examples of.  So, I made Spree send integers (sprintf(&quot;%d&quot;,8) #=&gt; &quot;8&quot; and sprintf(&quot;%d&quot;,9) #=&gt; &quot;9&quot;) so that the leading &quot;0&quot; would not get sent (thereby not trying to pass them as octals).  I created a app/models/spree/credit_card_decorator.rb file with the contents

Spree::CreditCard.class_eval do
  def expiry=(expiry)
    if expiry.present?
      self[:month], self[:year] = expiry.delete(&#39; &#39;).split(&#39;/&#39;)
      self[:year] = &quot;20&quot; + self[:year] if self[:year].length == 2
      self[:year] = self[:year].to_i
      self[:month] = self[:month].to_i
    end
  end
end




After adding this, I tested it in the browser and there were no more checkout errors!  I hope you&#39;ve found this interesting and helpful, thanks for reading!

</summary>
		<content type="html">&lt;p&gt;Hello again all.  I like to monitor the orders and exceptions of the Spree sites I work on to ensure everything is working as intended.  One morning I noticed an unusual error: &quot;invalid value for Integer(): \&quot;09\&quot;&quot; in Spree::Checkout/update on a Spree 2.1.x site.
&lt;/p&gt;

&lt;h5&gt;The Issue&lt;/h5&gt;

&lt;p&gt;
Given that this is a Spree-powered e-commerce site, a customer&#39;s inability to checkout is quite alarming. In the backtrace I could see that a &lt;b&gt;string&lt;/b&gt; of &quot;09&quot; was causing an invalid value for an &lt;b&gt;integer&lt;/b&gt;.  Why hadn&#39;t I seen this on every order in that case?
&lt;/p&gt;

&lt;p&gt;
I went into the browser and completed some test orders.  The bug seemed to affect only credit cards with a leading &quot;0&quot; in the expiration month, and then only certain expiration months.  I returned to the backtrace and saw this error was occurring with Active Merchant.  So, Spree was passing Active Merchant a string while Active Merchant was expecting an integer.
&lt;/p&gt;

&lt;p&gt;
Armed with a clearer understanding of the problem, I did some Googling.  I came across &lt;a href=&quot;https://github.com/Shopify/active_merchant/issues/919&quot;&gt;this post&lt;/a&gt;.  This post describes the source of this issue as being the behavior of sprintf which I will describe below.  This &lt;a href=&quot;https://www.ruby-forum.com/topic/77946&quot;&gt;topic&lt;/a&gt; was discussed in the &lt;a href=&quot;https://www.ruby-forum.com&quot;&gt;Ruby Forum&lt;/a&gt;.
&lt;/p&gt;

&lt;h5&gt; Octal Numbers &lt;/h5&gt;

&lt;p&gt;
As per Daniel Martin on the aforementioned post:
  &lt;ul&gt;
    &lt;li&gt;   sprintf(&quot;%d&quot;,&#39;08&#39;)      ==&gt;   ArgumentError&lt;/li&gt;
    &lt;li&gt;   sprintf(&quot;%d&quot;,&#39;8&#39;)       ==&gt;   &quot;8&quot;&lt;/li&gt;
    &lt;li&gt;   sprintf(&quot;%d&quot;,&#39;08&#39;.to_i) ==&gt;   &quot;8&quot;&lt;/li&gt;
    &lt;li&gt;   sprintf(&quot;%f&quot;,&#39;08&#39;)      ==&gt;   &quot;8.000000&quot;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;
As you can see, sprintf cannot convert &#39;08&#39; or &#39;09&#39; to a decimal. Matthias Reitlinger notes, &lt;blockquote&gt;&quot;%d tells sprintf to expect an Integer as the corresponding argument.  Being given a String instead it tries to convert it by calling Kernel#Integer&quot;&lt;/blockquote&gt;
&lt;/p&gt;


&lt;p&gt;
In the same post, we can review some documentation of Kernel#Integer
&lt;/p&gt;

&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-6Tdjwc_k_xQ/VLBOWap0sDI/AAAAAAAAALE/ajQl6ugROqs/s1600/blog.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-6Tdjwc_k_xQ/VLBOWap0sDI/AAAAAAAAALE/ajQl6ugROqs/s1600/blog.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;


&lt;p&gt;
We can see here that if the argument being provided is a string (and it is since that is what Spree is sending), the &quot;0&quot; will be honored.  Again, we know 
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td&gt;sprintf(&quot;%d&quot;,&#39;01&#39;) =&gt; &quot;1&quot;&lt;/td&gt;
      &lt;td&gt; | &lt;/td&gt;
      &lt;td&gt;sprintf(&quot;%d&quot;, 01) =&gt; &quot;1&quot;&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
      &lt;td&gt;sprintf(&quot;%d&quot;,&#39;02&#39;) =&gt; &quot;2&quot;&lt;/td&gt;
      &lt;td&gt; | &lt;/td&gt;
      &lt;td&gt;sprintf(&quot;%d&quot;, 02) =&gt; &quot;2&quot;&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
      &lt;td&gt;sprintf(&quot;%d&quot;,&#39;03&#39;) =&gt; &quot;3&quot;&lt;/td&gt;
      &lt;td&gt; | &lt;/td&gt;
      &lt;td&gt;sprintf(&quot;%d&quot;, 03) =&gt; &quot;3&quot;&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
      &lt;td&gt;sprintf(&quot;%d&quot;,&#39;04&#39;) =&gt; &quot;4&quot;&lt;/td&gt;
      &lt;td&gt; | &lt;/td&gt;
      &lt;td&gt;sprintf(&quot;%d&quot;, 04) =&gt; &quot;4&quot;&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
      &lt;td&gt;sprintf(&quot;%d&quot;,&#39;05&#39;) =&gt; &quot;5&quot;&lt;/td&gt;
      &lt;td&gt; | &lt;/td&gt;
      &lt;td&gt;sprintf(&quot;%d&quot;, 05) =&gt; &quot;5&quot;&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
      &lt;td&gt;sprintf(&quot;%d&quot;,&#39;06&#39;) =&gt; &quot;6&quot;&lt;/td&gt;
      &lt;td&gt; | &lt;/td&gt;
      &lt;td&gt;sprintf(&quot;%d&quot;, 06) =&gt; &quot;6&quot;&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
      &lt;td&gt;sprintf(&quot;%d&quot;,&#39;07&#39;) =&gt; &quot;7&quot;&lt;/td&gt;
      &lt;td&gt; | &lt;/td&gt;
      &lt;td&gt;sprintf(&quot;%d&quot;, 07) =&gt; &quot;7&quot;&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
      &lt;td&gt;sprintf(&quot;%d&quot;,&#39;08&#39;) =&gt; error&lt;/td&gt;
      &lt;td&gt; | &lt;/td&gt;
      &lt;td&gt;sprintf(&quot;%d&quot;, 08) =&gt; error&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
      &lt;td&gt;sprintf(&quot;%d&quot;,&#39;09&#39;) =&gt; error&lt;/td&gt;
      &lt;td&gt; | &lt;/td&gt;
      &lt;td&gt;sprintf(&quot;%d&quot;, 09) =&gt; error&lt;/td&gt;
    &lt;/tr&gt;

  &lt;/table&gt;
&lt;/p&gt;


&lt;p&gt; By pre-prepending the &quot;0&quot; to the numbers, they are being marked as &#39;octal&#39;.  &lt;a href=&quot;http://en.wikipedia.org/wiki/Octal&quot;&gt;Wikipedia&lt;/a&gt; defines octal numbers as
&lt;br&gt;&lt;/br&gt;
&lt;blockquote&gt;&quot;The octal numeral system, or oct for short, is the base-8 number system, and uses the digits 0 to 7. Octal numerals can be made from binary numerals by grouping consecutive binary digits into groups of three (starting from the right).&quot;
&lt;/blockquote&gt;
&lt;/p&gt;

&lt;p&gt;
So, 08 and 09 are not octal numbers.
&lt;/p&gt;


&lt;h5&gt;Solution&lt;/h5&gt;

&lt;p&gt;
This is why this checkout error did not occur on every order whose payment expiration month had a leading &quot;0&quot;, only August (08) and September (09) were susceptible as the leading &#39;0&#39; indicates we are passing in an octal of which 08 and 09 are not valid examples of.  So, I made Spree send integers (sprintf(&quot;%d&quot;,8) #=&gt; &quot;8&quot; and sprintf(&quot;%d&quot;,9) #=&gt; &quot;9&quot;) so that the leading &quot;0&quot; would not get sent (thereby not trying to pass them as octals).  I created a app/models/spree/credit_card_decorator.rb file with the contents
&lt;pre class=&quot;brush:ruby&quot;&gt;
Spree::CreditCard.class_eval do
  def expiry=(expiry)
    if expiry.present?
      self[:month], self[:year] = expiry.delete(&#39; &#39;).split(&#39;/&#39;)
      self[:year] = &quot;20&quot; + self[:year] if self[:year].length == 2
      self[:year] = self[:year].to_i
      self[:month] = self[:month].to_i
    end
  end
end
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;
After adding this, I tested it in the browser and there were no more checkout errors!  I hope you&#39;ve found this interesting and helpful, thanks for reading!
&lt;/p&gt;
</content>
	</entry>

	<entry>
		<title type="text">Authorization Failure for Customized Role</title>
		<link href="/blog/2014/auth-error/" />
		<id>/blog/2014/auth-error/</id>
		<published>2014-09-01T00:00:00-04:00</published>
		<updated>2014-09-01T00:00:00-04:00</updated>
		<summary type="html">Hello again all. Recently I was working on another Spree site running Spree 2.1.1. The client wanted to create some custom roles.  For example, the client wanted there to be a Sales Manager role.  A Sales Manager could log in and have read and write access to all the orders. However, a sales manager should not have read/write access to products, configuration, promotions, users, etc. This was easily accomplished by following the steps in the Spree documentation. As I will describe, this documentation assumes that the custom role will have access to Orders#index.

The client wanted to create a second custom role that had create, read, update and delete access to the Training model and nothing more.  The training model belongs to a taxon and has a unique event date and taxon id. An example would be a training instance with an event date of September 9th, 2014 that belongs to a taxon with the name &quot;Fire Safety 101&quot; and a description &quot;Teaching fire safety in accordance with OSHA standards. 10 hours and lunch is provided&quot;. So, I planned to create a training personnel role that should be able to log in and only have read/write access to Trainings. However, the Spree documentation did not provide an explanation on how to create a custom role that does not have read or write access to orders.



&amp;nbsp;

Following the pattern described in the Spree documentation for creating custom roles and their respective authorization, I created an ability_decorator.rb with the contents:

class AbilityDecorator
     include CanCan::Ability
     def initialize(user)
       if user.respond_to?(:has_spree_role?) &amp;&amp; user.has_spree_role?(&#39;sales_manager&#39;)
         can [:admin, :index, :show], Spree::Order
       end
       if user.respond_to?(:has_spree_role?) &amp;&amp; user.has_spree_role?(&#39;training&#39;)
         can [:admin, :manage], Spree::Training
       end
     end
   end
 
   Spree::Ability.register_ability(AbilityDecorator)


However, after creating a training user and attempting to log in, I got an unauthorized error.  So, I checked the logs:



The log output above shows that while I was logged in as a user with the training role, the application was checking for authorization on Spree::Admin::OrdersController#index (the orders list page), because the base admin URL (&quot;/admin&quot;) points to this controller action.  I reviewed the Devise documentation to modify where a user with the training role is redirected to upon login (via Spree Auth Devise&#39;s after_sign_in method), as shown in the code shown below.def after_sign_in_path_for(resource)
    stored_location_for(resource) ||
      if resource.is_a?(Spree::User) &amp;&amp; resource.has_spree_role?(&#39;training&#39;)
        admin_trainings_path
      else
        super
      end
  end


After making this change, I tried once again and was able to successfully log in as a training user and only have the desired access to Trainings. 



&amp;nbsp;

To summarize, if you&#39;d like to have a custom role and not give them access to Orders, you will need to make some adjustments outside the steps listed in Spree&#39;s documentation for custom role authorization.
</summary>
		<content type="html">&lt;p&gt;Hello again all. Recently I was working on another Spree site running Spree 2.1.1. The client wanted to create some custom roles.  For example, the client wanted there to be a Sales Manager role.  A Sales Manager could log in and have read and write access to all the orders. However, a sales manager should not have read/write access to products, configuration, promotions, users, etc. This was easily accomplished by following the steps in the &lt;a href=&quot;http://guides.spreecommerce.com/developer/security.html&quot;&gt;Spree documentation&lt;/a&gt;. As I will describe, this documentation assumes that the custom role will have access to Orders#index.&lt;/p&gt;

&lt;p&gt;The client wanted to create a second custom role that had create, read, update and delete access to the Training model and nothing more.  The training model belongs to a taxon and has a unique event date and taxon id. An example would be a training instance with an event date of September 9th, 2014 that belongs to a taxon with the name &quot;Fire Safety 101&quot; and a description &quot;Teaching fire safety in accordance with OSHA standards. 10 hours and lunch is provided&quot;. So, I planned to create a training personnel role that should be able to log in and &lt;i&gt;only&lt;/i&gt; have read/write access to Trainings. However, the Spree documentation did not provide an explanation on how to create a custom role that does not have read or write access to orders.&lt;/p&gt;

&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-mWF3P20Pclg/VA9MuXc5bmI/AAAAAAAAAJA/mV1kwpdyyJw/s1600/trainings.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-mWF3P20Pclg/VA9MuXc5bmI/AAAAAAAAAJA/mV1kwpdyyJw/s640/trainings.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;Following the pattern described in the &lt;a href=&quot;http://guides.spreecommerce.com/developer/security.html&quot;&gt;Spree documentation&lt;/a&gt; for creating custom roles and their respective authorization, I created an ability_decorator.rb with the contents:&lt;/p&gt;

&lt;pre class=&quot;brush:ruby&quot;&gt;class AbilityDecorator
     include CanCan::Ability
     def initialize(user)
       if user.respond_to?(:has_spree_role?) &amp;&amp; user.has_spree_role?(&#39;sales_manager&#39;)
         can [:admin, :index, :show], Spree::Order
       end
       if user.respond_to?(:has_spree_role?) &amp;&amp; user.has_spree_role?(&#39;training&#39;)
         can [:admin, :manage], Spree::Training
       end
     end
   end
 
   Spree::Ability.register_ability(AbilityDecorator)
&lt;/pre&gt;

&lt;p&gt;However, after creating a training user and attempting to log in, I got an unauthorized error.  So, I checked the logs:&lt;/p&gt;

&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-VtVD_OzXkOY/VA9T7Lt-ZXI/AAAAAAAAAJg/37CTLoPfLeg/s1600/log.png&quot; imageanchor=&quot;1&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-VtVD_OzXkOY/VA9T7Lt-ZXI/AAAAAAAAAJg/37CTLoPfLeg/s1600/log.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;The log output above shows that while I was logged in as a user with the training role, the application was checking for authorization on Spree::Admin::OrdersController#index (the orders list page), because the base admin URL (&quot;/admin&quot;) points to this controller action.  I reviewed the &lt;a href=&quot;http://rdoc.info/github/plataformatec/devise/master/Devise/Controllers/Helpers:after_sign_in_path_for&quot;&gt;Devise documentation&lt;/a&gt; to modify where a user with the training role is redirected to upon login (via &lt;a href=&quot;https://github.com/spree/spree_auth_devise&quot;&gt;Spree Auth Devise&#39;s after_sign_in method&lt;/a&gt;), as shown in the code shown below.&lt;/p&gt;&lt;pre class=&quot;brush:ruby&quot;&gt;def after_sign_in_path_for(resource)
    stored_location_for(resource) ||
      if resource.is_a?(Spree::User) &amp;&amp; resource.has_spree_role?(&#39;training&#39;)
        admin_trainings_path
      else
        super
      end
  end
&lt;/pre&gt;

&lt;p&gt;After making this change, I tried once again and was able to successfully log in as a training user and &lt;i&gt;only&lt;/i&gt; have the desired access to Trainings. &lt;/p&gt;

&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-aJZ0mzbnP_E/VA9giERKfxI/AAAAAAAAAKE/XpG9RNzy8Oc/s1600/training.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-aJZ0mzbnP_E/VA9giERKfxI/AAAAAAAAAKE/XpG9RNzy8Oc/s640/training.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;To summarize, if you&#39;d like to have a custom role and &lt;i&gt;not&lt;/i&gt; give them access to Orders, you will need to make some adjustments outside the steps listed in Spree&#39;s documentation for custom role authorization.&lt;/p&gt;
</content>
	</entry>

	<entry>
		<title type="text">How to Dynamically Update A Spree Product's Price Based on Volume Pricing</title>
		<link href="/blog/2013/dynamic-js/" />
		<id>/blog/2013/dynamic-js/</id>
		<published>2013-11-08T00:00:00-05:00</published>
		<updated>2013-11-08T00:00:00-05:00</updated>
		<summary type="html">I was recently working on a Spree Commerce site that utilizes Spree&#39;s Volume Pricing extension. For those who may not be familiar, the Spree Commerce Volume Pricing extension allows a user to offer a variety of &#39;price ranges&#39;. These price ranges represent discounted prices per unit for larger quantity orders. For example (we will use this t-shirt pricing table for the remainder of the post) from the  Spree Volume Pricing Github   Variant                Name               Range        Amount         Position
   -------------------------------------------------------------------------------
   Rails T-Shirt          1-5                (1..5)       19.99          1
   Rails T-Shirt          6-9                (6...10)     18.99          2
   Rails T-Shirt          10 or more         (10+)        17.99          3
I would like to mention that these ranges, although resembling traditional ranges,  are expressed as Strings as this will become more important later. Again from the Spree Volume Pricing project page at Github,   &quot;All ranges need to be expressed as Strings and must include parentheses. &#39;(1..10)&#39; is considered to be a valid range. &#39;1..10&#39; is not considered to be a valid range (missing the parentheses.)&quot; Now that the intent of Volume Pricing has been discussed I would like to bring your attention to what is likely a very common use case.  Often on an e-commerce website when placing an order for an item the price and quantity is seen as so, Which is generated from relatively typical Spree models and functions in erb and the HTML5 number input: #price per shirt
   per shirt

  #number field
   &#39;title&#39;, :min =&gt; 1 %&gt;
   &#39;large primary&#39;, :id =&gt; &#39;add-to-cart-button&#39;, :type =&gt; :submit do %&gt;
    
  
However, without any additional coding when a customer increases their order quantity to the next range, the price per unit (shirt) should be decremented as noted in the table above.  However, as we can see here rather than the price being lowered to 18.99 per shirt, it continues to indicate 19.99 even though volume pricing has taken effect and the shirts are actually 18.99 each. So, how would one accomplish this?  JavaScript is the first thing that comes to most people&#39;s mind.  I spent some time looking around the Spree docs thinking that certainly there must be something quick to drop in, but there was not.  I did a little Googling and found the same thing to be true- not much info out there on how best to proceed with this task.  I was very surprised to find no notes on anyone doing what I would think is a very common issue.  So, here we are and I hope that anyone who reads this finds it helpful. Step 1a: Create an array of the pricesThis is the most challenging part of the task.  After discussing the issue with some colleagues I believed the easiest method was to create an array of all the possible volume prices.  Then, this price could be referenced by just taking the selected quantity of an order, subtracting 1 (to account for the zero-indexing of arrays) and getting the value of the complete volume price array via that index.  In this example, using the data from the table above, the array would look like this: [19.99, 19.99, 19.99, 19.99, 19.99,18.99,18.99,18.99,18.99] In case that isn&#39;t clear from above, volume price (1..5) is 19.99 so the first 5 items in the array are 19.99. Volume price 18.99 is in effect for range (6..9) so the 6th through 9th item in the array are 18.99. If a user were to indicate a quantity of 5, 5-1 = 4.  Index 4 of the array is 19.99, the correct price for five shirts. Note, for now I&#39;ve left off the (10+) range and associated pricing and the reason will be clear in a few moments. Alright, so now on how to create this array. Those of you who are familiar with Spree know that we use the Spree Model decorator, in this case, the Product decorator which should be created in app/models/product_decorator.rb Spree::Product.class_eval do

  def all_prices
    price_ranges = Spree::Variant.where(product_id: self.id).first.volume_prices[0...-1].map(&amp;amp;:range)
    volume_prices = Spree::Variant.where(product_id: self.id).first.volume_prices[0...-1].map(&amp;amp;:amount).map(&amp;amp;:to_f)
    price_ranges.map(&amp;amp;:to_range).map{|v| v.map{|i| volume_prices[price_ranges.map(&amp;amp;:to_range).index(v)]}}.flatten
  end

end


Step 1b: Create to_range function for Strings &amp;amp; create a function to return lowest possible price per unitNow here you may note the to_range call in pink above.  As mentioned in this post and in the Volume Pricing docs, Spree expresses these ranges as Strings and not true ranges, so I used this to_range method in lib/range.rb to easily convert the String ranges into true Ranges, which I found on the &quot;Master Ruby/Rails Programming&quot; post at athikunte blog. I would also like to draw your attention to the fact that I am taking all but the last item of the volume prices array ([0...-1]).  Why?  Because &#39;10+&#39; will not be converted into a range and any quantity of 10 or greater can just get the lowest volume price. Perhaps most importantly, if some product&#39;s last range is 10+ while another is say 25+, this method of obtaining the lowest discounted price will avoid any problems related to that variance.  In lib/string.rb, class String
  def to_range
    case self.count(&#39;.&#39;)
      when 2
        elements = self.split(&#39;..&#39;)
        return Range.new(elements[0].to_i, elements[1].to_i)
      when 3
        elements = self.split(&#39;...&#39;)
        return Range.new(elements[0].to_i, elements[1].to_i-1)
      else
        raise ArgumentError.new(&quot;Couldn&#39;t convert to Range: #{str}&quot;)
    end
  end
end
app/models/product_decorator.rbdef lowest_discounted_volume_price
  Spree::Variant.where(product_id: self.id).first.volume_prices[-1].to_f
end
Step 2:  Load Your New Volume Pricing Array and Lowest Possible PriceI did this by creating some script tags in the product show page (or wherever you wish to have this price per unit showing) to make the data from the backend available in a JavaScript file that will update the price dynamically as a user adds or subtracts from the desired quantity. I just called the functions I created in the product decorator here and stored the result in variables for the JavaScript file, app/views/product_show_page.html.erb var all_prices = ;
var lowest_discounted_volume_price = ;
Step3: Write JavaScript Code to Handle Quantity ChangesIn your Spree app just follow typical rails protocol and create a new JavaScript file in app/assets/javascripts/volume_pricing.js and of course require it in your manifest file.  Here, just plug your variables in and update your view with the change event (I also added keyup so the price changes if/when a user types in a new quantity) $(function() {
  $(&#39;.title&#39;).on(&#39;keyup change&#39;, function(e){
    var qty = parseInt( $(this).val());
    var prices_array = all_prices;
    var per_shirt = &#39; per shirt&#39;
    if (qty &amp;lt;= prices_array.length)
      {
        $(&#39;span.price.selling&#39;).text(&#39;$&#39;+prices_array[qty -1] + per_shirt);
      }
    else
      {
        $(&#39;span.price.selling&#39;).text(&#39;$&#39;+lowest_discounted_volume_price + per_shirt);
      }
   });


And now you have dynamically updating price based on selected quantity!  I hope you have found this informative and useful, thank you for reading.
</summary>
		<content type="html">&lt;p&gt;I was recently working on a Spree Commerce site that utilizes Spree&#39;s Volume Pricing extension. For those who may not be familiar, the &lt;a href=&quot;https://github.com/spree/spree_volume_pricing&quot;&gt;Spree Commerce Volume Pricing extension&lt;/a&gt; allows a user to offer a variety of &#39;price ranges&#39;. These price ranges represent discounted prices per unit for larger quantity orders. For example (we will use this t-shirt pricing table for the remainder of the post) from the  &lt;b&gt;&lt;a href=&quot;https://github.com/spree/spree_volume_pricing&quot;&gt;Spree Volume Pricing Github&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;pre class=&quot;brush:plain&quot;&gt;   Variant                Name               Range        Amount         Position
   -------------------------------------------------------------------------------
   Rails T-Shirt          1-5                (1..5)       19.99          1
   Rails T-Shirt          6-9                (6...10)     18.99          2
   Rails T-Shirt          10 or more         (10+)        17.99          3
&lt;/pre&gt;&lt;p&gt;I would like to mention that these ranges, although resembling traditional ranges,  are expressed as Strings as this will become more important later. Again from the &lt;b&gt;&lt;a href=&quot;https://github.com/spree/spree_volume_pricing&quot;&gt;Spree Volume Pricing&lt;/a&gt;&lt;/b&gt; project page at Github, &lt;/p&gt;&lt;blockquote cite=&quot;https://github.com/spree/spree_volume_pricing&quot;&gt;  &quot;All ranges need to be expressed as Strings and must include parentheses. &#39;(1..10)&#39; is considered to be a valid range. &#39;1..10&#39; is not considered to be a valid range (missing the parentheses.)&quot; &lt;/blockquote&gt;&lt;p&gt;Now that the intent of Volume Pricing has been discussed I would like to bring your attention to what is likely a very common use case.  Often on an e-commerce website when placing an order for an item the price and quantity is seen as so, &lt;/p&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-alN-kfuZGNo/UnlXKm88CYI/AAAAAAAAACg/y-jaWFZ3JhM/s1600/Blog+Picture+1.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-alN-kfuZGNo/UnlXKm88CYI/AAAAAAAAACg/y-jaWFZ3JhM/s320/Blog+Picture+1.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;Which is generated from relatively typical Spree models and functions in erb and the HTML5 number input: &lt;/p&gt;&lt;pre class=&quot;brush:ruby&quot;&gt;#price per shirt
  &lt;%= display_price(@product) %&gt; per shirt

  #number field
  &lt;%= number_field_tag (@product.variants_and_option_values.any? ? :quantity : &quot;variants[#{@product.master.id}]&quot;),
    1, :class =&gt; &#39;title&#39;, :min =&gt; 1 %&gt;
  &lt;%= button_tag :class =&gt; &#39;large primary&#39;, :id =&gt; &#39;add-to-cart-button&#39;, :type =&gt; :submit do %&gt;
    &lt;%= Spree.t(:add_to_cart) %&gt;
  &lt;% end %&gt;
&lt;/pre&gt;&lt;p&gt;However, without any additional coding when a customer increases their order quantity to the next range, the price per unit (shirt) should be decremented as noted in the table above.  However, as we can see here rather than the price being lowered to 18.99 per shirt, it continues to indicate 19.99 even though volume pricing has taken effect and the shirts are actually 18.99 each. &lt;/p&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-TxMtWgbU8bg/UnlXQ9dOdpI/AAAAAAAAACo/6Aw0kpGQF0Q/s1600/blog+picture+2.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-TxMtWgbU8bg/UnlXQ9dOdpI/AAAAAAAAACo/6Aw0kpGQF0Q/s320/blog+picture+2.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;So, how would one accomplish this?  JavaScript is the first thing that comes to most people&#39;s mind.  I spent some time looking around the Spree docs thinking that certainly there must be something quick to drop in, but there was not.  I did a little Googling and found the same thing to be true- not much info out there on how best to proceed with this task.  I was very surprised to find no notes on anyone doing what I would think is a very common issue.  So, here we are and I hope that anyone who reads this finds it helpful. &lt;/p&gt;&lt;h3&gt;&lt;b&gt;Step 1a: Create an array of the prices&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;This is the most challenging part of the task.  After discussing the issue with some colleagues I believed the easiest method was to create an array of all the possible volume prices.  Then, this price could be referenced by just taking the selected quantity of an order, subtracting 1 (to account for the zero-indexing of arrays) and getting the value of the complete volume price array via that index.  In this example, using the data from the table above, the array would look like this: &lt;/p&gt;&lt;p&gt;[19.99, 19.99, 19.99, 19.99, 19.99,18.99,18.99,18.99,18.99] &lt;/p&gt;&lt;p&gt;In case that isn&#39;t clear from above, volume price (1..5) is 19.99 so the first 5 items in the array are 19.99. Volume price 18.99 is in effect for range (6..9) so the 6th through 9th item in the array are 18.99. If a user were to indicate a quantity of 5, 5-1 = 4.  Index 4 of the array is 19.99, the correct price for five shirts. &lt;b&gt;Note, for now I&#39;ve left off the (10+) range and associated pricing and the reason will be clear in a few moments.&lt;/b&gt; &lt;/p&gt;&lt;p&gt;Alright, so now on how to create this array. Those of you who are familiar with Spree know that we use the Spree Model decorator, in this case, the Product decorator which should be created in app/models/product_decorator.rb &lt;/p&gt;&lt;pre class=&quot;brush:ruby&quot;&gt;Spree::Product.class_eval do

  def all_prices
    price_ranges = Spree::Variant.where(product_id: self.id).first.volume_prices[0...-1].map(&amp;amp;:range)
    volume_prices = Spree::Variant.where(product_id: self.id).first.volume_prices[0...-1].map(&amp;amp;:amount).map(&amp;amp;:to_f)
    price_ranges.map(&amp;amp;:to_range).map{|v| v.map{|i| volume_prices[price_ranges.map(&amp;amp;:to_range).index(v)]}}.flatten
  end

end
&lt;/pre&gt;

&lt;h3&gt;&lt;b&gt;Step 1b: Create to_range function for Strings &amp;amp; create a function to return lowest possible price per unit&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;Now here you may note the to_range call in pink above.  As mentioned in this post and in the Volume Pricing docs, Spree expresses these ranges as Strings and not true ranges, so I used this to_range method in lib/range.rb to easily convert the String ranges into true Ranges, which I found on the &quot;Master Ruby/Rails Programming&quot; post at &lt;a href=&quot;http://athikunte.blogspot.com/2008/02/convert-string-to-range.html&quot;&gt;athikunte blog&lt;/a&gt;. I would also like to draw your attention to the fact that I am taking all but the last item of the volume prices array ([0...-1]).  Why?  Because &#39;10+&#39; will not be converted into a range and any quantity of 10 or greater can just get the lowest volume price. Perhaps most importantly, if some product&#39;s last range is 10+ while another is say 25+, this method of obtaining the lowest discounted price will avoid any problems related to that variance.  In lib/string.rb, &lt;/p&gt;&lt;pre class=&quot;brush:ruby&quot;&gt;class String
  def to_range
    case self.count(&#39;.&#39;)
      when 2
        elements = self.split(&#39;..&#39;)
        return Range.new(elements[0].to_i, elements[1].to_i)
      when 3
        elements = self.split(&#39;...&#39;)
        return Range.new(elements[0].to_i, elements[1].to_i-1)
      else
        raise ArgumentError.new(&quot;Couldn&#39;t convert to Range: #{str}&quot;)
    end
  end
end
&lt;/pre&gt;&lt;p&gt;app/models/product_decorator.rb&lt;/p&gt;&lt;pre class=&quot;brush:ruby&quot;&gt;def lowest_discounted_volume_price
  Spree::Variant.where(product_id: self.id).first.volume_prices[-1].to_f
end
&lt;/pre&gt;&lt;h3&gt;&lt;b&gt;Step 2:  Load Your New Volume Pricing Array and Lowest Possible Price&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;I did this by creating some script tags in the product show page (or wherever you wish to have this price per unit showing) to make the data from the backend available in a JavaScript file that will update the price dynamically as a user adds or subtracts from the desired quantity. I just called the functions I created in the product decorator here and stored the result in variables for the JavaScript file, app/views/product_show_page.html.erb &lt;/p&gt;&lt;pre class=&quot;brush:ruby&quot;&gt;var all_prices = &lt;%= @product.all_prices %&gt;;
var lowest_discounted_volume_price = &lt;%= @product.lowest_discounted_volume_price %&gt;;
&lt;/pre&gt;&lt;h3&gt;&lt;b&gt;Step3: Write JavaScript Code to Handle Quantity Changes&lt;/b&gt;&lt;/h3&gt;&lt;p&gt;In your Spree app just follow typical rails protocol and create a new JavaScript file in app/assets/javascripts/volume_pricing.js and of course require it in your manifest file.  Here, just plug your variables in and update your view with the change event (I also added keyup so the price changes if/when a user types in a new quantity) &lt;/p&gt;&lt;pre class=&quot;brush:jscript&quot;&gt;$(function() {
  $(&#39;.title&#39;).on(&#39;keyup change&#39;, function(e){
    var qty = parseInt( $(this).val());
    var prices_array = all_prices;
    var per_shirt = &#39; per shirt&#39;
    if (qty &amp;lt;= prices_array.length)
      {
        $(&#39;span.price.selling&#39;).text(&#39;$&#39;+prices_array[qty -1] + per_shirt);
      }
    else
      {
        $(&#39;span.price.selling&#39;).text(&#39;$&#39;+lowest_discounted_volume_price + per_shirt);
      }
   });
&lt;/pre&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-_6TWsFcN3N8/UnqH6Ts6MaI/AAAAAAAAADw/KfGv2-vukbk/s1600/blog3.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-_6TWsFcN3N8/UnqH6Ts6MaI/AAAAAAAAADw/KfGv2-vukbk/s400/blog3.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;And now you have dynamically updating price based on selected quantity!  I hope you have found this informative and useful, thank you for reading.&lt;/p&gt;
</content>
	</entry>

</feed>
